<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_Idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum kingStates { 
    idle,
    run,
    attack,
    jump,
    hit
}

state = kingStates.idle;
// ABILITIES
spd = 5;
grav = 1;
moveX = 0;
moveY = 0;
jumpCounter = 0;
jumpMax = 2;
hp = 3;
attackCounter = 0;
hp = 150;
hp_max = 150;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CONTROLLER
switch (state) {
    case kingStates.idle:
        Scr_Idle();
        break;
    case kingStates.run:
        Scr_Run();
        break;
    case kingStates.jump:
        Scr_Jump();
        break;
    case kingStates.attack:
        Scr_Attack();
        break;
}

// Get movement input
var move = pressD - pressA // move will be -1, 0, or 1
moveX = spd * move;

// PHYSICS
// Apply gravity if not on a slope or ground
if (!place_meeting(x, y + 1, Obj_Ground) &amp;&amp; !place_meeting(x, y + 1, Obj_Wall)) {
    moveY += grav; // Apply gravity
    if (moveY &gt; 9) moveY = 9; // Terminal velocity
}

// COLLISION
// Ground collision
if (place_meeting(x, y + moveY, Obj_Ground)) {
    while (!place_meeting(x, y + sign(moveY), Obj_Ground)) {
        y += sign(moveY); // Adjust y position until not colliding
    }
    moveY = 0;
    jumpCounter = 0; // Reset jump counter when on the ground
}

if (place_meeting(x + moveX, y - 2, Obj_Ground))
{
    while (not place_meeting(x + sign(moveX), y - 2, Obj_Ground))
    {
        x += sign(moveX);
    }
                
    moveX = 0;
}

// Slope collision
var on_slope = false;
if (place_meeting(x + moveX, y, Obj_Wall)) {
    on_slope = true;
    moveY = -moveX; // Move up the slope
}

// Apply horizontal movement
x += moveX;

// Apply vertical movement and correct for slope collision
if (!on_slope || (on_slope &amp;&amp; !place_meeting(x, y + moveY, Obj_Wall))) {
    y += moveY;
} else if (on_slope) {
    // Correct the vertical position if the player is embedded in the slope
    while (place_meeting(x, y, Obj_Wall)) {
        y -= 1; // Move the player up until they are no longer colliding with the slope
    }
}

// SPRITE CONTROLLER
// Update sprite direction based on input
if (move != 0) {
    image_xscale = sign(move);
}
image_speed = 2/3;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_GoToNextRoom">
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="Obj_Shoot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp = hp - 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_Spider_DealDmg">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp = hp - 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_Ice_DealDmg">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp = hp - 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_healthbar(x-10, y-30, x+10, y - 35, hp/hp_max *100, c_black, c_red, c_lime, 0, true, true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
